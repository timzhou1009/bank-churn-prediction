}
for (j in 1:4) {
if (sep_questions[i, j] == 6) {
sep_questions[i, j] <- 0
}
}
if (sep_questions[i, 5] == 5) {
sep_questions[i, 5] <- 0
}
for (k in 6:ncol(sep_questions)) {
if (sep_questions[i, k] == 6) {
sep_questions[i, k] <- 0
}
}
# Rename columns
colnames(sep_questions)[6:11] <- c(
"R1_Health",
"R2_Distancing",
"R3_Funds",
"R4_Internet",
"R5_Acad_Prepared",
"R6_Social"
)
corr_sep <- round(cor(sep_questions), digits = 2)
p_corr_sep <- cor_pmat(sep_questions)
ggcorrplot(corr_sep, method = "circle")
p_corr_sep
round(p_corr_sep, digits = 2)
ggcorplot(round(p_corr_sep, digits = 2))
ggcorrplot(round(p_corr_sep, digits = 2))
round(p_corr_sep, digits = 2)
corrplot(round(p_corr_sep, digits = 2))
ggcorrplot(corr_sep, lab = TRUE)
ggcorrplot(corr_sep, type = "lower", lab = TRUE)
corr_sep <- round(cor(sep_questions), digits = 1)
ggcorrplot(corr_sep, type = "lower", lab = TRUE)
ggcorrplot(corr_sep, lab = TRUE)
ggcorrplot(corr_sep, type = "lower", lab = TRUE)
col_idx_to_select <- c(8: 18)
sep_questions <- na.omit(dat1[, col_idx_to_select])
# Recode to dummy
for(i in 1:ncol(sep_questions)) {
sep_questions[, i] <- as.numeric(sep_questions[, i])
}
for (j in 1:4) {
if (sep_questions[i, j] == 6) {
sep_questions[i, j] <- 0
}
}
if (sep_questions[i, 5] == 5) {
sep_questions[i, 5] <- 0
}
for (k in 6:ncol(sep_questions)) {
if (sep_questions[i, k] == 6) {
sep_questions[i, k] <- 0
}
}
# Rename columns
colnames(sep_questions)[6:11] <- c(
"R1_Health",
"R2_Distancing",
"R3_Funds",
"R4_Internet",
"R5_Acad_Prepared",
"R6_Social"
)
corr_sep <- round(cor(sep_questions), digits = 1)
p_corr_sep <- cor_pmat(sep_questions)
ggcorrplot(corr_sep, type = "lower", lab = TRUE, p.mat = p_corr_sep)
col_idx_to_select <- c(8: 18)
sep_questions <- na.omit(dat1[, col_idx_to_select])
# Recode to dummy
for(i in 1:ncol(sep_questions)) {
sep_questions[, i] <- as.numeric(sep_questions[, i])
}
for (j in 1:4) {
if (sep_questions[i, j] == 6) {
sep_questions[i, j] <- 0
}
}
if (sep_questions[i, 5] == 5) {
sep_questions[i, 5] <- 0
}
for (k in 6:ncol(sep_questions)) {
if (sep_questions[i, k] == 6) {
sep_questions[i, k] <- 0
}
}
# Rename columns
colnames(sep_questions)[6:11] <- c(
"R1_Health",
"R2_Distancing",
"R3_Funds",
"R4_Internet",
"R5_Acad_Prepared",
"R6_Social"
)
corr_sep <- round(cor(sep_questions), digits = 1)
p_corr_sep <- cor_pmat(sep_questions)
ggcorrplot(corr_sep, type = "lower", lab = TRUE, p.mat = p_corr_sep, insig = "blank")
ggcorrplot(corr_sep, type = "lower", lab = TRUE, p.mat = p_corr_sep)
dat <- datarium::marketing
str(dat)
# Then, we fit a simple linear regression model:
#    D.V.: sales
#    I.V.: youtube
mod_lin <- lm(sales ~ youtube, data = dat)
summary(mod_lin)
# Visualize data distribution
plot(sales ~ youtube, data = dat)
# Check linearity
plot(mod_lin, which = 1)
# Check fit for other types of models:
# Log
mod_log <- lm(sales ~ log(youtube), data = dat)
summary(mod_log)
# Quadratic
mod_quad <- lm(sales ~ youtube^2, data = dat)
summary(mod_quad)
# Polynomial
mod_poly <- lm(sales ~ poly(youtube, 3), data = dat)
summary(mod_poly)
summary(mod_quad)
#
mod_poly2 <- lm(sales ~ poly(youtube, 2), data = dat)
summary(mod_poly2)
#
mod_poly2 <- lm(sales ~ poly(youtube, 2) + log(youtube), data = dat)
summary(mod_poly2)
#
mod_poly2 <- lm(sales ~ poly(youtube, 1) + log(youtube), data = dat)
summary(mod_poly2)
#
mod_poly2 <- lm(sales ~ poly(youtube, 2) + log(youtube), data = dat)
summary(mod_poly2)
plot(mod_poly2, which = 1)
summary(mod_poly2)
plot(mod_poly2, which = 1)
# Seems like linear model is a good fit. Let's check data distribution.
# Visualize data distribution
plot(sales ~ youtube, data = dat)
# Check linearity
plot(mod_lin, which = 1)
# Check fit for other types of models:
# Log
mod_log <- lm(sales ~ log(youtube), data = dat)
summary(mod_log)
# R-squared: 0.565 (decreased, indicating poorer model fit)
plot(mod_log)
# R-squared: 0.565 (decreased, indicating poorer model fit)
plot(mod_log, which = 1)
# R-squared: 0.6119 (does not change)
# Check residuals vs. fitted values
plot(mod_quad, which = 1)
# R-squared: 0.622 (increased!)
# Adjusted R-squared: 0.6162
# Check residuals vs. fitted values
plot(mod_poly, which = 1)
mod_poly2 <- lm(sales ~ poly(youtube, 2) + log10(youtube), data = dat)
summary(mod_poly2)
plot(mod_poly2, which = 1)
#
mod_poly2 <- lm(sales ~ poly(youtube, 2) + log2(youtube), data = dat)
summary(mod_poly2)
plot(mod_poly2, which = 1)
#
mod_poly2 <- lm(sales ~ poly(youtube, 2) + logit(youtube), data = dat)
summary(mod_poly2)
mod_poly2 <- lm(sales ~ poly(youtube, 2) + log(youtube, base = 10), data = dat)
summary(mod_poly2)
plot(mod_poly2, which = 1)
#
mod_poly2 <- lm(sales ~ poly(youtube, 2) + log(youtube, base = 2), data = dat)
summary(mod_poly2)
plot(mod_poly2, which = 1)
#
mod_poly2 <- lm(sales ~ poly(youtube, 2) + log(youtube, base = 20), data = dat)
summary(mod_poly2)
plot(mod_poly2, which = 1)
#
mod_poly2 <- lm(sales ~ poly(youtube, 2) + log(youtube)^2, data = dat)
summary(mod_poly2)
plot(mod_poly2, which = 1)
#
mod_poly2 <- lm(sales ~ poly(youtube, 2) + log(youtube), data = dat)
summary(mod_poly2)
plot(mod_poly2, which = 1)
#
mod_poly2 <- lm(sales ~ poly(youtube) + log(youtube), data = dat)
summary(mod_poly2)
plot(mod_poly2, which = 1)
#
mod_poly2 <- lm(sales ~ youtube^0.5 + log(youtube), data = dat)
summary(mod_poly2)
plot(mod_poly2, which = 1)
mod_poly2 <- lm(sales ~ youtube^0.5 + log(youtube), data = dat)
summary(mod_poly2)
plot(mod_poly2, which = 1)
#
mod_poly2 <- lm(sales ~ youtube^0.5, data = dat)
summary(mod_poly2)
#
mod_poly2 <- lm(sales ~ youtube^4, data = dat)
summary(mod_poly2)
plot(mod_poly2, which = 1)
#
mod_poly2 <- lm(sales ~ youtube^8, data = dat)
summary(mod_poly2)
plot(mod_poly2, which = 1)
plot(std_res ~ predict(mod_lin), data = dat)
dat$std_res <- stdres(mod_lin)
# Check if there are any outliers:
# 1. Calculate standardized residuals
library(MASS)
dat$std_res <- stdres(mod_lin)
plot(std_res ~ predict(mod_lin), data = dat)
text(std_res ~ predict(mod_lin), data = dat, labels = rownames(dat), cex = 0.9, pos = 3)
abline(h = 2)
abline(h = -2)
plot(std_res ~ predict(mod_lin), data = dat)
text(std_res ~ predict(mod_lin), data = dat, labels = rownames(dat), cex = 0.9, pos = 3)
abline(h =  2, col = "red", lty = "dotted")
abline(h = -2, col = "red", lty = "dotted")
plot(std_res ~ predict(mod_lin), data = dat)
text(std_res ~ predict(mod_lin), data = dat, labels = rownames(dat), cex = 0.5, pos = 3)
abline(h =  2, col = "red", lty = "dotted")
abline(h = -2, col = "red", lty = "dotted")
# 2. Check influential plot
library(car)
influencePlot(mod_lin)
# 3. Calculate studentized residuals
dat$student_res <- studres(mod_lin)
plot(student_res ~ predict(mod_lin), data = dat)
par(mfrow = c(1, 2))
plot(std_res ~ predict(mod_lin), data = dat)
plot(student_res ~ predict(mod_lin), data = dat)
toy <- read.csv("Downloads/toy_example3 (1).csv")
str(toy)
toy$Male <- ifelse(toy$Sex == "M", yes = 1, no = 0)
summary(lm(Weight ~ Height + Male, toy))
summary(lm(Weight ~ Height * Male, toy))
summary(lm(Weight ~ Height + Male, toy))
toy$Female <- ifelse(toy$Male == "0", yes = 1, no = 0)
summary(lm(Weight ~ Height * Female, toy))
x = factor(3:5)
as.numeric(x)
n <- 100
beta0 <- 10
beta1 <- 2
beta2 <- 10
var_error <- 5
error <- rnorm(n, mean = 0, sd = sqrt(var))
iv1 <- rnorm(n, mean = 60, sd = 15) # Math score
iv2 <- rnorm(n, mean = 15, sd = 5) # Number of hours spent on learning per week
y <- beta0 + beta1 * iv1 + beta2 * iv2 + error
dat_sim <- data.frame(y, iv1, iv2)
plot(dat_sim$iv1, dat_sim$iv2)
n <- 100
beta0 <- 10
beta1 <- 2
beta2 <- 10
var_error <- 5
error <- rnorm(n, mean = 0, sd = sqrt(var_error))
iv1 <- rnorm(n, mean = 60, sd = 15) # Math score
iv2 <- rnorm(n, mean = 15, sd = 5) # Number of hours spent on learning per week
y <- beta0 + beta1 * iv1 + beta2 * iv2 + error
dat_sim <- data.frame(y, iv1, iv2)
plot(dat_sim$iv1, dat_sim$iv2)
lm_sim <- lm(y ~ iv1 * iv2, data = dat_sim)
summary(lm_sim)
n <- 100
beta0 <- 10
beta1 <- 2
beta2 <- 10
var_error <- 5
error <- rnorm(n, mean = 0, sd = sqrt(var_error))
iv1 <- rnorm(n, mean = 60, sd = 15) # Math score
iv2 <- iv1 * .5 # Number of hours spent on learning per week
y <- beta0 + beta1 * iv1 + beta2 * iv2 + error
dat_sim <- data.frame(y, iv1, iv2)
lm_sim <- lm(y ~ iv1 * iv2, data = dat_sim)
summary(lm_sim)
n <- 100
beta0 <- 10
beta1 <- 2
beta2 <- 10
var_error <- 5
error <- rnorm(n, mean = 0, sd = sqrt(var_error))
iv1 <- rnorm(n, mean = 60, sd = 15) # Math score
iv2 <- rnorm(n, mean = 15, sd = 5) # Number of hours spent on learning per week
y <- beta0 + beta1 * iv1 + beta2 * iv2 + error
dat_sim <- data.frame(y, iv1, iv2)
lm_sim <- lm(y ~ iv1 * iv2, data = dat_sim)
summary(lm_sim)
# iv2: Whether or not received math tutoring program
iv2 <- runif(n)
# iv2: Whether or not received math tutoring program
iv2 <- rbinom(n, size = c(0, 1), prob = 0.4)
n <- 100
beta0 <- 10
beta1 <- 2
beta2 <- 10
var_error <- 5
error <- rnorm(n, mean = 0, sd = sqrt(var_error))
# iv1: Number of hours spent on learning math per week
iv1 <- rnorm(n, mean = 10, sd = 5)
# iv2: Whether or not received math tutoring program
iv2 <- rbinom(n, size = c(0, 1), prob = 0.4)
y <- beta0 + beta1 * iv1 + beta2 * iv2 + error
dat_sim <- data.frame(y, iv1, iv2)
lm_sim <- lm(y ~ iv1 * iv2, data = dat_sim)
summary(lm_sim)
# iv2: Whether or not received math tutoring program
iv2 <- rbinom(n, size = iv1, prob = 0.4)
# iv2: Whether or not received math tutoring program
iv2 <- rbinom(n, size = c(0, 1), prob = iv1)
n <- 100
beta0 <- 10
beta1 <- 2
beta2 <- 10
var_error <- 5
error <- rnorm(n, mean = 0, sd = sqrt(var_error))
# iv1: Number of hours spent on learning math per week
iv1 <- rnorm(n, mean = 10, sd = 5)
# iv2: Whether or not received math tutoring program
iv2 <- rbinom(n, size = c(0, 1), prob = 0.6)
iv1 <- ifelse(iv2 == 0, yes = iv1 - 5, no = iv1)
y <- beta0 + beta1 * iv1 + beta2 * iv2 + error
dat_sim <- data.frame(y, iv1, iv2)
lm_sim <- lm(y ~ iv1 * iv2, data = dat_sim)
summary(lm_sim)
n <- 100
beta0 <- 10
beta1 <- 2
beta2 <- 10
var_error <- 5
error <- rnorm(n, mean = 0, sd = sqrt(var_error))
# iv1: Number of hours spent on learning math per week
iv1 <- rnorm(n, mean = 10, sd = 5)
# iv2: Whether or not received math tutoring program
iv2 <- rbinom(n, size = c(0, 1), prob = 0.6)
iv1 <- ifelse(iv2 == 0, yes = iv1 *.5, no = iv1)
y <- beta0 + beta1 * iv1 + beta2 * iv2 + error
dat_sim <- data.frame(y, iv1, iv2)
lm_sim <- lm(y ~ iv1 * iv2, data = dat_sim)
summary(lm_sim)
plot(dat_sim$y, dat_sim$iv1, col = dat_sim$iv2)
plot(dat_sim$y, dat_sim$iv1, dat_sim$iv2)
plot(dat_sim$y, dat_sim$iv1)
points(dat_sim$iv2))
points(dat_sim$iv2)
plot(dat_sim$y, dat_sim$iv1[dat_sum$iv2 == 0], col = "blue")
plot(dat_sim$y, dat_sim$iv1[dat_sum$iv2 == 1], col = "red")
plot(dat_sim$y, dat_sim$iv1[dat_sim$iv2 == 0], col = "blue")
plot(dat_sim$y, dat_sim$iv1[dat_sim$iv2 == 1], col = "red")
plot(dat_sim$y, dat_sim$iv1[dat_sim$iv2 == 0], col = "blue")
points(dat_sim$y, dat_sim$iv1[dat_sim$iv2 == 1], col = "red")
plot(dat_sim$y, dat_sim$iv1[dat_sim$iv2 == 0], col = "blue")
points(dat_sim$iv1[dat_sim$iv2 == 1], col = "red")
plot(dat_sim$y, dat_sim$iv1[dat_sim$iv2 == 0], col = "blue")
plot(dat_sim$y[dat_sim$iv2 == 0], dat_sim$iv1[dat_sim$iv2 == 0], col = "blue")
points(dat_sim$iv1[dat_sim$iv2 == 1], col = "red")
n <- 100
beta0 <- 10
beta1 <- 2
beta2 <- 10
var_error <- 1
error <- rnorm(n, mean = 0, sd = sqrt(var_error))
# iv1: Number of hours spent on learning math per week
iv1 <- rnorm(n, mean = 10, sd = 5)
# iv2: Whether or not received math tutoring program
iv2 <- rbinom(n, size = c(0, 1), prob = 0.6)
iv1 <- ifelse(iv2 == 0, yes = iv1 *.5, no = iv1)
y <- beta0 + beta1 * iv1 + beta2 * iv2 + error
dat_sim <- data.frame(y, iv1, iv2)
lm_sim <- lm(y ~ iv1 * iv2, data = dat_sim)
summary(lm_sim)
plot(dat_sim$y[dat_sim$iv2 == 0], dat_sim$iv1[dat_sim$iv2 == 0], col = "blue")
points(dat_sim$iv1[dat_sim$iv2 == 1], col = "red")
n <- 100
beta0 <- 10
beta1 <- 2
beta2 <- 10
var_error <- 1
error <- rnorm(n, mean = 0, sd = sqrt(var_error))
# iv1: Number of hours spent on learning math per week
iv1 <- rnorm(n, mean = 10, sd = 5)
# iv2: Whether or not received math tutoring program
iv2 <- rbinom(n, size = c(0, 1), prob = 0.6)
y <- beta0 + beta1 * iv1 + beta2 * iv2 + error
dat_sim <- data.frame(y, iv1, iv2)
lm_sim <- lm(y ~ iv1 * iv2, data = dat_sim)
summary(lm_sim)
plot(dat_sim$y[dat_sim$iv2 == 0], dat_sim$iv1[dat_sim$iv2 == 0], col = "blue")
points(dat_sim$iv1[dat_sim$iv2 == 1], col = "red")
n <- 100
beta0 <- 10
beta1 <- 2
beta2 <- 10
var_error <- 1
error <- rnorm(n, mean = 0, sd = sqrt(var_error))
# iv1: Number of hours spent on learning math per week
iv1 <- rnorm(n, mean = 10, sd = 5)
# iv2: Whether or not received math tutoring program
iv2 <- rbinom(n, size = c(0, 1), prob = 0.6)
y <- iv1 + iv2
dat_sim <- data.frame(y, iv1, iv2)
lm_sim <- lm(y ~ iv1 * iv2, data = dat_sim)
summary(lm_sim)
plot(dat_sim$y[dat_sim$iv2 == 0], dat_sim$iv1[dat_sim$iv2 == 0], col = "blue")
points(dat_sim$iv1[dat_sim$iv2 == 1], col = "red")
# Example
# Let's examine interactive effects using a simulated dataset
# Equation: Y = intercept + iv1 +
dat_sim <- datarium::marketing
str(dat_sim)
mean(newspaper)
mean(dat_sim$newspaper)
dat_sim <- datarium::marketing
str(dat_sim)
dat_sim$newspaper_50 <- ifelse(dat_sim$newspaper >= 50, yes = 1, no = 0)
lm_sim <- lm(sales ~ facebook * newspaper_50, data = dat_sim)
plot(dat_sim$sales, dat_sim$facebook)
summary(lm_sim)
mean(dat_sim$youtube)
dat_sim <- datarium::marketing
str(dat_sim)
dat_sim$youtube_170 <- ifelse(dat_sim$youtube_170 >= 170, yes = 1, no = 0)
lm_sim <- lm(sales ~ facebook * youtube_170, data = dat_sim)
plot(dat_sim$sales, dat_sim$facebook)
dat_sim <- datarium::marketing
str(dat_sim)
dat_sim$youtube_170 <- ifelse(dat_sim$youtube >= 170, yes = 1, no = 0)
lm_sim <- lm(sales ~ facebook * youtube_170, data = dat_sim)
plot(dat_sim$sales, dat_sim$facebook)
summary(lm_sim)
summary(lm_sim)
str(toy)
# Equation: sales = 10.25 + 0.08 * facebook + 2.49 * youtube +
#                   0.19 * (facebook * youtube)
#                 = 10.25 + (0.08 + 0.19 * youtube) * facebook + 2.49 * youtube
#                 = 10.25 + (2.49 + 0.19 * facebook) * youtube + 0.08 * facebook
plot(dat_sim$sales, dat_sim$facebook)
plot(dat_sim$sales, dat_sim$facebook)
abline(a = 10.25, b = 0.08 + 0.19, col = "blue")
abline(a = 10.25, b = 2.49 + 0.19, col = "red")
knitr::opts_chunk$set(echo = TRUE)
dat_sim <- datarium::marketing
str(dat_sim)
# Create a dummy variable that marks those higher than 170 youtube sales as 1.
dat_sim$youtube_170 <- ifelse(dat_sim$youtube >= 170, yes = 1, no = 0)
lm_sim <- lm(sales ~ facebook * youtube_170, data = dat_sim)
summary(lm_sim)
# Visualize
plot(dat_sim$sales, dat_sim$facebook)
abline(a = 10.25, b = 0.08 + 0.19, col = "blue")
abline(a = 10.25, b = 2.49 + 0.19, col = "red")
# Visualize
plot(dat_sim$facebook, dat_sim$sales)
abline(a = 10.25, b = 0.08 + 0.19, col = "blue")
abline(a = 10.25, b = 2.49 + 0.19, col = "red")
# Visualize
plot(dat_sim$facebook[dat_sim$youtube_170 == 0], dat_sim$sales)
# Visualize
plot(dat_sim$facebook[dat_sim$youtube_170 == 0], dat_sim$sales[[dat_sim$youtube_170 == 0]])
# Visualize
plot(dat_sim$facebook[dat_sim$youtube_170 == 0], dat_sim$sales[dat_sim$youtube_170 == 0])
points(dat_sim$facebook[dat_sim$youtube_170 == 0], col = "red")
# Visualize
plot(dat_sim$facebook, dat_sim$sales)
abline(a = 10.25, b = 0.08 + 0.19, col = "blue")
abline(a = 10.25, b = 0.08, col = "red")
# Visualize
plot(dat_sim$facebook, dat_sim$sales)
abline(a = 10.25, b = 0.08 + 0.19, col = "blue") # youtube_170 == 1
abline(a = 10.25, b = 0.08, col = "red")         # youtube_170 == 0
setwd("~/Documents/GitHub/commercial-bank-customer-retention-prediction")
setwd("~/Documents/GitHub/commercial-bank-customer-retention-prediction")
getwd()
getwd()
# Author: Tong Jin
# Date created: 11/24/2020
# Date modified: 11/24/2020
knitr::opts_chunk$set(
echo = TRUE,
message=FALSE,
warning=FALSE,
fig.height = 6,
fig.width = 8
)
# Dependencies
library(plotly)
library(openintro)
library(data.table)
dat_cust_info_Q3 <- read.csv("data/x_train/cust_info_q3.csv")
getwd()
dat_cust_info_Q3 <- read.csv("data/x_train/cust_info_q3.csv")
# Author: Tong Jin
# Date created: 11/24/2020
# Date modified: 11/24/2020
knitr::opts_chunk$set(
echo = TRUE,
message=FALSE,
warning=FALSE,
fig.height = 6,
fig.width = 8
)
# Dependencies
library(plotly)
library(openintro)
library(data.table)
dat_cust_info_Q3 <- read.csv("data/x_train/cust_info_q3.csv")
